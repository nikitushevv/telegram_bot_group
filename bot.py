import os
import sqlite3
from openai import OpenAI
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
client = OpenAI()
client.api_key = OPENAI_API_KEY

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ë–î
def log_interaction(user_id, username, request, response):
    conn = sqlite3.connect('bot_stats.db')
    c = conn.cursor()
    c.execute('''
        INSERT INTO interactions (user_id, username, request, response)
        VALUES (?, ?, ?, ?)
    ''', (user_id, username, request, response))
    conn.commit()
    conn.close()

# –ö–æ–º–∞–Ω–¥–∞ /stats
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != 270587758:  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à user_id
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    conn = sqlite3.connect('bot_stats.db')
    c = conn.cursor()
    
    c.execute("SELECT COUNT(*) FROM interactions")
    total = c.fetchone()[0]
    
    c.execute("SELECT request, COUNT(*) FROM interactions GROUP BY request ORDER BY 2 DESC LIMIT 5")
    popular = "\n".join([f"{row[0]} ({row[1]})" for row in c.fetchall()])
    
    await update.message.reply_text(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total}\n‚Ä¢ –¢–æ–ø-5:\n{popular}")
    conn.close()

# –ö–æ–º–∞–Ω–¥–∞ /chinese
async def chinese(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = " ".join(context.args).strip()
    if not user_text:
        await update.message.reply_text("‚ùå –ü—Ä–∏–º–µ—Ä: /chinese –¢–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞")
        return

    try:
        response = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": "–û—Ç–≤–µ—á–∞–π –≤ —Å—Ç–∏–ª–µ –∫–∏—Ç–∞–π—Å–∫–æ–π –º—É–¥—Ä–æ—Å—Ç–∏"},
                    {
                        "role": "user",
                        "content": user_text
                    }
    ]
)
        gpt_response = response.choices[0].message.content
        log_interaction(update.effective_user.id, update.effective_user.username, user_text, gpt_response)
        await update.message.reply_text(gpt_response)
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

# # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     request = update.message.text
#     response = f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {request}"
#     log_interaction(update.effective_user.id, update.effective_user.username, request, response)
#     await update.message.reply_text(response)

def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("chinese", chinese))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
