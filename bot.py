import os
import sqlite3
import datetime
from openai import OpenAI
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    JobQueue
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
client = OpenAI()
client.api_key = OPENAI_API_KEY

# –£–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —á–∞—Ç
ALLOWED_CHAT_ID =  -1002370287106

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ë–î
def log_interaction(user_id, username, request, response):
    conn = sqlite3.connect('bot_stats.db')
    c = conn.cursor()
    c.execute('''
        INSERT INTO interactions (user_id, username, request, response)
        VALUES (?, ?, ?, ?)
    ''', (user_id, username, request, response))
    conn.commit()
    conn.close()

# –ö–æ–º–∞–Ω–¥–∞ /stats
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–∞–º —á–∞—Ç
    if update.effective_chat.id != ALLOWED_CHAT_ID:
        await update.message.reply_text("–≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ.")
        return

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ /stats —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º—É user_id
    if update.effective_user.id != 270587758:  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π ID
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–µ /stats –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    conn = sqlite3.connect('bot_stats.db')
    c = conn.cursor()
    
    # 1. –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ (–≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    c.execute("SELECT COUNT(*) FROM interactions")
    total_requests = c.fetchone()[0]
    
    # 2. –°—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–¥–µ–ª–∞–ª –∫–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    c.execute("""
        SELECT user_id, username, COUNT(*) as cnt
        FROM interactions
        GROUP BY user_id, username
        ORDER BY cnt DESC
    """)
    rows = c.fetchall()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    user_lines = []
    for user_id_val, username_val, cnt in rows:
        display_name = username_val if username_val else "unknown"
        user_lines.append(f"{display_name} ({user_id_val}): {cnt}")

    user_stats_text = "\n".join(user_lines)

    # 3. –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    stats_message = (
        f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}\n\n"
        f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:\n"
        f"{user_stats_text}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.message.reply_text(stats_message)
    conn.close()

# –ö–æ–º–∞–Ω–¥–∞ /chinese
async def chinese(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–∞–º —á–∞—Ç
    if update.effective_chat.id != ALLOWED_CHAT_ID:
        await update.message.reply_text("–≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ.")
        return

    user_text = " ".join(context.args).strip()
    if not user_text:
        await update.message.reply_text("‚ùå –ü—Ä–∏–º–µ—Ä: /chinese –¢–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞")
        return

    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–û—Ç–≤–µ—á–∞–π –≤ —Å—Ç–∏–ª–µ –∫–∏—Ç–∞–π—Å–∫–æ–π –º—É–¥—Ä–æ—Å—Ç–∏"},
                {"role": "user", "content": user_text}
            ]
        )
        gpt_response = response.choices[0].message.content
        log_interaction(
            update.effective_user.id,
            update.effective_user.username,
            user_text,
            gpt_response
        )
        await update.message.reply_text(gpt_response)
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ —Å–ª–æ–≤–æ "–º–Ω–µ–Ω–∏–µ"
async def handle_opinion(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–∞–º —á–∞—Ç
    if update.effective_chat.id != ALLOWED_CHAT_ID:
        await update.message.reply_text("–≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ.")
        return
    
    user_text = update.message.text
    try:
        content_for_opinion = """
            –ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã –æ—á–µ–Ω—å –ø–ª–æ—Ö–æ–π —à—É—Ç–Ω–∏–∫ –∏ –ø–æ–ø—ã—Ç–∞–µ—à—å—Å—è —Å–¥–µ–ª–∞—Ç—å –æ—á–µ–Ω—å –ø–ª–æ—Ö—É—é –∏ 
            –≥–ª—É–ø—É—é —à—É—Ç–∫—É –Ω–∞–¥ –º–æ–∏–º —Å–ª–µ–¥—É—é—â–∏–º —Ç–µ–∫—Å—Ç–æ–º. –ü—É—Å—Ç—å —à—É—Ç–∫–∏ –±—É–¥—É—Ç –æ—á–µ–Ω—å –æ—á–µ–Ω—å –æ–±–∏–¥–Ω—ã–º–∏, 
            –¥–æ–±–∞–≤—å –µ—â–µ –≤ –∫–æ–Ω—Ü–µ –æ–¥–Ω–æ –∏–∑ —Ç—Ä–µ—Ö: "–ö–∞–∫–∞—è –∂–∞–ª–æ—Å—Ç—å", "–õ–æ—Ö", "–°–ø–∞—Å–∏–±–æ —á—Ç–æ –ø–æ–∑–≤–∞–ª–∏" —Å—Ç–∞—Ä–∞—è—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ —Å–º—ã—Å–ª—É –∫ —à—É—Ç–∫–µ
        """
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {
                    "role": "system",
                    "content": content_for_opinion
                },
                {
                    "role": "user",
                    "content": user_text
                }
            ]
        )
        gpt_response = response.choices[0].message.content
        log_interaction(
            update.effective_user.id,
            update.effective_user.username,
            user_text,
            gpt_response
        )
        await update.message.reply_text(gpt_response)
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–Ω–µ–Ω–∏—è: {str(e)}")


# === 1. –§—É–Ω–∫—Ü–∏—è, –ø–æ–ª—É—á–∞—é—â–∞—è "Game of Thrones" —Ç–∞–π—Ç–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ ===
async def generate_got_titles():
    # 1. –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –ë–î (–ø–æ —Å—É—Ç–∏ - –≤—Å–µ, –∫—Ç–æ –∫–æ–≥–¥–∞-—Ç–æ –ø–∏—Å–∞–ª –±–æ—Ç—É)
    conn = sqlite3.connect('bot_stats.db')
    c = conn.cursor()
    c.execute("SELECT DISTINCT user_id, username FROM interactions")
    users = c.fetchall()
    conn.close()

    # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if not users:
        return "–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞, —É –∫–æ–≥–æ –µ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –≤ –ë–î."

    # –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∏–º—ë–Ω, —É–±–µ—Ä—ë–º –ø—É—Å—Ç—ã–µ
    # (–≤–¥—Ä—É–≥ –∫—Ç–æ-—Ç–æ –ø–∏—Å–∞–ª –±–µ–∑ username, —Ç–æ–≥–¥–∞ –ø–æ–¥—Å—Ç–∞–≤–∏–º —á—Ç–æ-—Ç–æ –≤–º–µ—Å—Ç–æ)
    names = []
    for user_id_val, username_val in users:
        display_name = username_val if username_val else f"ID_{user_id_val}"
        names.append(display_name)

    # 2. –ì–æ—Ç–æ–≤–∏–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è GPT: –ø—É—Å—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–∏—Ç—É–ª—ã
    # –õ—É—á—à–µ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º, —á—Ç–æ–±—ã GPT —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª —Å–ø–∏—Å–æ–∫
    try:
        # –°–æ–∑–¥–∞—ë–º —Ç–µ–∫—Å—Ç –¥–ª—è GPT
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–µ–¥–∞–¥–∏–º —Å–ø–∏—Å–æ–∫ –∏–º—ë–Ω –∏ –ø–æ–ø—Ä–æ—Å–∏–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–¥—É–º–∞—Ç—å —Ç–∞–π—Ç–ª:
        prompt_for_gpt = (
            "–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ –≤—Å–µ —ç—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ‚Äî –≥–µ—Ä–æ–∏ –ò–≥—Ä—ã –ü—Ä–µ—Å—Ç–æ–ª–æ–≤. "
            "–ü—Ä–∏–¥—É–º–∞–π –∫–∞–∂–¥–æ–º—É —ç–ø–∏—á–Ω—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–∏—Ç—É–ª –≤ —Å—Ç–∏–ª–µ —Å–µ—Ä–∏–∞–ª–∞. "
            "–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞: ¬´@–ò–º—è: –¢–∏—Ç—É–ª¬ª.\n\n"
            "–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n" + "\n".join(names)
        )

        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {
                    "role": "system",
                    "content": "–¢—ã ‚Äî –Ω–∞—Å—Ç–æ—è—â–∏–π –º–µ–π—Å—Ç–µ—Ä –∏–∑ –í–µ—Å—Ç–µ—Ä–æ—Å–∞, –ø—Ä–∏–¥—É–º—ã–≤–∞–µ—à—å —ç–ø–∏—á–Ω—ã–µ —Ç–∏—Ç—É–ª—ã –≤ —Å—Ç–∏–ª–µ '–ò–≥—Ä—ã –ø—Ä–µ—Å—Ç–æ–ª–æ–≤'."
                },
                {
                    "role": "user",
                    "content": prompt_for_gpt
                }
            ]
        )
        gpt_response = response.choices[0].message.content
        return gpt_response

    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–∏—Ç—É–ª–æ–≤: {str(e)}"

# === 2. –ö–æ–º–∞–Ω–¥–∞ /got ‚Äî —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –≤—Ä—É—á–Ω—É—é –ø–æ–ª—É—á–∏—Ç—å —Ç–∏—Ç—É–ª—ã ===
async def got_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —á–∞—Ç
    if update.effective_chat.id != ALLOWED_CHAT_ID:
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ.")
        return

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∞–π—Ç–ª—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    titles_text = await generate_got_titles()
    await update.message.reply_text(titles_text)

# === 3. –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ (–∫–∞–∂–¥—ã–π —á–µ—Ç–≤–µ—Ä–≥ –≤ 19:00) ===
#    –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –≤ run_daily —Å—á–∏—Ç–∞—é—Ç—Å—è —Å 0 (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫) –ø–æ 6 (–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ).
#    –ß–µ—Ç–≤–µ—Ä–≥ = 3.
async def send_weekly_got_titles(context: ContextTypes.DEFAULT_TYPE):
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–∞–π—Ç–ª—ã
    titles_text = await generate_got_titles()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –Ω—É–∂–Ω—ã–π —á–∞—Ç
    await context.bot.send_message(chat_id=ALLOWED_CHAT_ID, text=titles_text)

def main():
    app = Application.builder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("chinese", chinese))
    # –ö–æ–º–∞–Ω–¥–∞ /got –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    app.add_handler(CommandHandler("got", got_command))

    # –ü—Ä–∏ –ª—é–±–æ–º —Ç–µ–∫—Å—Ç–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —Å–ª–æ–≤–æ "–º–Ω–µ–Ω–∏–µ" (–≤ –ª—é–±–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ)
    opinion_filter = filters.TEXT & filters.Regex(r'(?i)\b–º–Ω–µ–Ω–∏–µ\b')
    app.add_handler(MessageHandler(opinion_filter, handle_opinion))

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º JobQueue –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    # –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –±–µ—Ä—ë—Ç—Å—è —Ç–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (–∏–ª–∏ –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å tzinfo).
    job_queue = app.job_queue
    job_queue.run_daily(
        send_weekly_got_titles,
        time=datetime.time(hour=19, minute=0),
        days=(3,)  # 0=–ü–Ω, 1=–í—Ç, 2=–°—Ä, 3=–ß—Ç, 4=–ü—Ç, 5=–°–±, 6=–í—Å
    )

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
