import os
import sqlite3
from openai import OpenAI
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
client = OpenAI()
client.api_key = OPENAI_API_KEY

# –£–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —á–∞—Ç
ALLOWED_CHAT_ID =  -1002370287106

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ë–î
def log_interaction(user_id, username, request, response):
    conn = sqlite3.connect('bot_stats.db')
    c = conn.cursor()
    c.execute('''
        INSERT INTO interactions (user_id, username, request, response)
        VALUES (?, ?, ?, ?)
    ''', (user_id, username, request, response))
    conn.commit()
    conn.close()

# –ö–æ–º–∞–Ω–¥–∞ /stats
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–∞–º —á–∞—Ç
    if update.effective_chat.id != ALLOWED_CHAT_ID:
        await update.message.reply_text("–≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ.")
        return

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ /stats —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º—É user_id
    if update.effective_user.id != 270587758:  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π ID
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–µ /stats –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    conn = sqlite3.connect('bot_stats.db')
    c = conn.cursor()
    
    # 1. –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ (–≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    c.execute("SELECT COUNT(*) FROM interactions")
    total_requests = c.fetchone()[0]
    
    # 2. –°—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–¥–µ–ª–∞–ª –∫–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    c.execute("""
        SELECT user_id, username, COUNT(*) as cnt
        FROM interactions
        GROUP BY user_id, username
        ORDER BY cnt DESC
    """)
    rows = c.fetchall()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    user_lines = []
    for user_id_val, username_val, cnt in rows:
        display_name = username_val if username_val else "unknown"
        user_lines.append(f"{display_name} ({user_id_val}): {cnt}")

    user_stats_text = "\n".join(user_lines)

    # 3. –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    stats_message = (
        f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}\n\n"
        f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:\n"
        f"{user_stats_text}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.message.reply_text(stats_message)
    conn.close()

# –ö–æ–º–∞–Ω–¥–∞ /chinese
async def chinese(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–∞–º —á–∞—Ç
    if update.effective_chat.id != ALLOWED_CHAT_ID:
        await update.message.reply_text("–≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ.")
        return

    user_text = " ".join(context.args).strip()
    if not user_text:
        await update.message.reply_text("‚ùå –ü—Ä–∏–º–µ—Ä: /chinese –¢–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞")
        return

    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–û—Ç–≤–µ—á–∞–π –≤ —Å—Ç–∏–ª–µ –∫–∏—Ç–∞–π—Å–∫–æ–π –º—É–¥—Ä–æ—Å—Ç–∏"},
                {"role": "user", "content": user_text}
            ]
        )
        gpt_response = response.choices[0].message.content
        log_interaction(
            update.effective_user.id,
            update.effective_user.username,
            user_text,
            gpt_response
        )
        await update.message.reply_text(gpt_response)
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ —Å–ª–æ–≤–æ "–º–Ω–µ–Ω–∏–µ"
async def handle_opinion(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–∞–º —á–∞—Ç
    if update.effective_chat.id != ALLOWED_CHAT_ID:
        await update.message.reply_text("–≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ.")
        return
    
    user_text = update.message.text
    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {
                    "role": "system",
                    "content": "–ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º –º–Ω–µ–Ω–∏–µ–º –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç"
                },
                {
                    "role": "user",
                    "content": user_text
                }
            ]
        )
        gpt_response = response.choices[0].message.content
        log_interaction(
            update.effective_user.id,
            update.effective_user.username,
            user_text,
            gpt_response
        )
        await update.message.reply_text(gpt_response)
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–Ω–µ–Ω–∏—è: {str(e)}")

def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("chinese", chinese))
    
    # –ü—Ä–∏ –ª—é–±–æ–º —Ç–µ–∫—Å—Ç–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —Å–ª–æ–≤–æ "–º–Ω–µ–Ω–∏–µ" (–≤ –ª—é–±–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ) ‚Äî handle_opinion
    opinion_filter = filters.TEXT & filters.Regex(r'(?i)\b–º–Ω–µ–Ω–∏–µ\b')
    app.add_handler(MessageHandler(opinion_filter, handle_opinion))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
